# -*- coding: utf-8 -*-
"""customer-segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18PtXSDBH1aFI-OWzSibBsTpiza-nZnmW

# Customer Segmentation using NLP and KMeans Custering #

## Importing packages ##
"""

!pip install openpyxl
import openpyxl
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from sklearn.cluster import KMeans
import seaborn as sns
import datetime as dt
sns.set()

"""## Importing Data ##"""

retail = pd.read_excel('../input/customer-segmentation-dataset/Online Retail.xlsx')
retail['CustomerID'] = retail['CustomerID'].astype(str)

retail.head(5)

"""## EDA and Cleaning ##"""

retail.loc[:, retail.columns!='CustomerID'].describe().T

"""### Insights - There are negative values in 'Quantity' and 'UnitPrice' columns. In transactional data they usually describe returned quantity and price and they are not error values."""

retail.info()

"""### Insights - There are null values in 'Description' and 'CustomerID'"""

retail.isnull().sum()

"""### Instights - There are 1454 null values in 'Description' and 135080 in 'CustomerID'

## Removing null customer ID
"""

retail = retail.loc[pd.notnull(retail['CustomerID'])].copy()

"""## Printing unique conut of all columns"""

retail.nunique()

"""# Segementation based on Monthly Proprtion Bought [Quantity]

### Creating the required view
"""

retail['Year'] = pd.to_datetime(retail['InvoiceDate'], format='%Y-%m-%d').dt.year
retail['Year_Month'] = pd.to_datetime(retail['InvoiceDate'], format='%Y-%m-%d').dt.strftime('%Y-%m')
retail.head(5)

"""### We will only use 2011 data as 2010 only has 1 month """

retail= retail.loc[retail['Year']==2011]
retail.head(5)

retail_group = retail.groupby(['CustomerID'], as_index=False).agg({'Quantity':'sum'}).rename(columns={'Quantity':'Quantity_sum'})
retail_group.head(5)

reatil_pivot = retail.pivot_table(index='CustomerID', columns='Year_Month', values='Quantity', aggfunc='sum').reset_index()
reatil_pivot.fillna(0, inplace=True)
reatil_pivot.head(5)

"""### Merging both groupby and pivot data"""

Final_retail_view = reatil_pivot.merge(retail_group, on='CustomerID', how='inner')
Final_retail_view.head(5)

"""### Calculating Proportions"""

cols = list(Final_retail_view.columns)[1:]
for col in cols:
    Final_retail_view[col] = Final_retail_view[col]/Final_retail_view['Quantity_sum']
Final_retail_view.fillna(0, inplace=True)
Final_retail_view.head(5)

Final_retail_view[Final_retail_view['Quantity_sum']==0]

"""### We dont need these customers because they did'nt buy anything in 2011 """

Final_retail_view = Final_retail_view[Final_retail_view['Quantity_sum']!=0]

temp_df = Final_retail_view.copy()
Final_retail_view.drop(['CustomerID', 'Quantity_sum'], axis=1, inplace=True)

X = Final_retail_view
inertia = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)
plt.figure(figsize=(20, 9))
sns.lineplot(x=np.arange(1, 11), y=inertia)
plt.xlabel('Cluster', fontsize=15, fontweight='bold')
plt.ylabel('Inertia', fontsize=15, fontweight='bold')
plt.show()

"""### There are 5 clusters"""

kmeans = KMeans(n_clusters=5)
kmeans.fit(X)
clusters = pd.DataFrame(X, columns=Final_retail_view.columns)
clusters['Cluster'] = kmeans.labels_
clusters['CustomerID'] = temp_df['CustomerID']
clusters.to_csv('Customer_Monthly_Proportion_Bought_CLUSTERED.csv', index=False)

clusters.groupby('Cluster', as_index=False).agg({'2011-01':'mean', '2011-02':'mean', '2011-03':'mean', '2011-04':'mean', '2011-05':'mean', '2011-06':'mean', '2011-07':'mean', '2011-08':'mean', '2011-09':'mean', '2011-10':'mean', '2011-11':'mean', '2011-12':'mean', 'CustomerID':'count'}).to_csv('Customer_Monthly_Proportion_Bought_cluster_SUMMARY.csv', index=False)

"""# Segmentation Summary"""

clusters.groupby('Cluster', as_index=False).agg({'2011-01':'mean', '2011-02':'mean', '2011-03':'mean', '2011-04':'mean', '2011-05':'mean', '2011-06':'mean', '2011-07':'mean', '2011-08':'mean', '2011-09':'mean', '2011-10':'mean', '2011-11':'mean', '2011-12':'mean', 'CustomerID':'count'})

